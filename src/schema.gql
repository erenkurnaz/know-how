# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResult {
  accessToken: String!
  refreshToken: String!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createTag(name: String!): Tag!
  favoriteTag(id: String!): Tag!
  followUser(userId: String!): UserFollowResult!
  postCreate(input: PostInput!): PostCreateResult!
  postDelete(id: String!): PostDeleteResult!
  postUpdate(id: String!, input: PostInput!): PostUpdateResult!
  signIn(input: SignInInput!): SignInResult!
  signUp(input: SignUpInput!): SignUpResult!
  unfavoriteTag(id: String!): Tag!
  unfollowUser(userId: String!): UserUnfollowResult!
  updateUser(input: UpdateUserInput!): UserUpdateResult!
}

type Post {
  content: String!
  createdAt: DateTime!
  id: ID!
  owner: User!
  tags: [Tag!]!
  title: String!
  updatedAt: DateTime
}

union PostCreateResult = Post | ServerError | ValidationError

union PostDeleteResult = Post | ServerError | ValidationError

input PostInput {
  content: String!
  tagIds: [String!]!
  title: String!
}

union PostUpdateResult = Post | ServerError | ValidationError

type Query {
  currentUser: User!
  post(id: String!): Post!
  postSearch(keyword: String!): [Post!]!
  posts: [Post!]!
  postsByUserId(userId: String!): [Post!]!
  refreshAccessToken: RefreshResult!
  tags: [Tag!]!
}

type RefreshResult {
  accessToken: String!
  user: User!
}

type ServerError {
  message: String!
  name: String!
  status: Float!
}

input SignInInput {
  email: String!
  password: String!
}

union SignInResult = AuthResult | ServerError | ValidationError

input SignUpInput {
  email: String!
  fullName: String!
  password: String!
}

union SignUpResult = AuthResult | ServerError | ValidationError

type Tag {
  createdAt: DateTime!
  id: ID!
  isFavorite: Boolean!
  name: String!
  updatedAt: DateTime
}

input UpdateUserInput {
  email: String!
  fullName: String!
  github: String
  instagram: String
  linkedin: String
  twitter: String
}

type User {
  createdAt: DateTime!
  email: String!
  favoriteTags: [Tag!]!
  followers: [User!]!
  followings: [User!]!
  fullName: String!
  github: String
  id: ID!
  instagram: String
  isFollowing: Boolean
  linkedin: String
  twitter: String
  updatedAt: DateTime
}

union UserFollowResult = ServerError | User | ValidationError

union UserUnfollowResult = ServerError | User | ValidationError

union UserUpdateResult = ServerError | User | ValidationError

type ValidationError {
  fields: [ValidationErrorField!]!
  message: String!
  name: String!
  status: Float!
}

type ValidationErrorField {
  field: String!
  message: String!
}